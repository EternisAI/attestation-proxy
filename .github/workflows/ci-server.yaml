name: '[CI] Server'

on:
  push:
    branches:
    - main
    tags:
    - v*.*.*
    paths:
    - '!*'
    - go.mod
    - go.sum
    - cmd/server/**
    - pkg/**

  workflow_dispatch:

concurrency:
  group: ${{ github.workflow_ref }}-${{ github.ref }}
  cancel-in-progress: ${{ github.ref_type == 'branch' && github.ref_name != 'main' }}

jobs:
  build:
    name: Build Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
      packages: write
    steps:
    - name: Checkout
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

    - name: Docker Meta
      id: meta
      uses: docker/metadata-action@902fa8ec7d6ecbf8d84d538b9b233a880e428804 # v5.7.0
      with:
        images: |
          ghcr.io/eternisai/attestation-proxy/server
        tags: |
          type=sha
          type=semver,pattern={{raw}}

    - name: Install Cosign
      uses: sigstore/cosign-installer@d58896d6a1865668819e1d91763c7751a165e159 # v3.9.2

    - name: Get Cosign OIDC Token
      id: cosign-token
      run: |
        OIDC_TOKEN="$(
          curl -sSL -H "Authorization: bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" \
          "$ACTIONS_ID_TOKEN_REQUEST_URL&audience=sigstore" | jq -r .value
        )"
        test -n "$OIDC_TOKEN"
        echo "::add-mask::$OIDC_TOKEN"
        echo "token=$OIDC_TOKEN" >> $GITHUB_OUTPUT

    - name: Log in to GHCR
      uses: docker/login-action@184bdaa0721073962dff0199f1fb9940f07167d1 # v3.5.0
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.11.1

    - name: Build Image
      id: build-image
      uses: docker/build-push-action@471d1dc4e07e5cdedd4c2171150001c434f0b7a4 # v6.15.0
      with:
        context: .
        file: cmd/server/Dockerfile
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        push: true

    - name: Cosign App Image
      run: >-
        cosign sign --yes --identity-token "$COSIGN_OIDC_TOKEN"
        "ghcr.io/eternisai/attestation-proxy/server@${{ steps.build-image.outputs.digest }}"
      env:
        COSIGN_OIDC_TOKEN: ${{ steps.cosign-token.outputs.token }}
